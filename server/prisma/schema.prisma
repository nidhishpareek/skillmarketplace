generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    PROVIDER
}

enum Type {
    INDIVIDUAL
    COMPANY
}

enum Currency {
    USD
    AUD
    SGD
    INR
}

enum WorkNature {
    ONLINE
    ONSITE
}

enum OfferStatus {
    PENDING
    ACCEPTED
    REJECTED
}

enum TaskCategory {
    DESIGN
    DEVELOPMENT
    MARKETING
}

model Profile {
    id           String   @id @default(cuid())
    role         Role
    type         Type
    firstName    String?
    lastName     String?
    mobileNumber String   @unique
    email        String   @unique
    password     String
    address      Address?

    companyName       String?
    businessTaxNumber String? // 10-character capital letters/digits

    skills        Skill[] // For providers
    tasks         Task[] // For users
    offers        Offer[] // For providers
    acceptedTasks Task[]         @relation("AcceptedTasks")
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    progressLogs  ProgressLogs[]
    logs          Logs[]
}

model Address {
    id           String @id @default(cuid())
    streetNumber String
    streetName   String
    city         String
    state        String
    postcode     String
    profileId    String @unique

    profile Profile @relation(fields: [profileId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Skill {
    id         String     @id @default(cuid())
    category   String
    experience String
    nature     WorkNature
    hourlyRate Float
    profileId  String
    currency   Currency

    profile Profile @relation(fields: [profileId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id String @id @default(cuid())

    category    TaskCategory
    name        String
    description String
    isCompleted Boolean      @default(false)
    completedAt DateTime?

    taskAccepted    Boolean   @default(false)
    acceptedOfferId String?   @unique
    userId          String
    acceptedById    String? // so we can extend for the company in future (suppose company has multiple users)
    acceptedAt      DateTime?

    user          Profile        @relation(fields: [userId], references: [id])
    offers        Offer[]
    acceptedBy    Profile?       @relation("AcceptedTasks", fields: [acceptedById], references: [id])
    progressLogs  ProgressLogs[]
    acceptedOffer Offer?         @relation("AcceptedOffer", fields: [acceptedOfferId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Offer {
    id            String      @id @default(cuid())
    status        OfferStatus @default(PENDING)
    hourlyRate    Float
    startDate     DateTime
    expectedHours Int
    currency      Currency
    providerId    String
    taskId        String

    provider        Profile @relation(fields: [providerId], references: [id])
    task            Task    @relation(fields: [taskId], references: [id])
    acceptedForTask Task?   @relation("AcceptedOffer")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ProgressSubType {
    TASK_STARTED
    TASK_PAUSED
    TASK_RESUMED
    TASK_STOPPED
}

model ProgressLogs {
    id        String @id @default(cuid())
    task      Task   @relation(fields: [taskId], references: [id])
    taskId    String
    logId     String @unique // Each ProgressLogs must have a unique, required Log
    profileId String // for user activity summary

    profile Profile @relation(fields: [profileId], references: [id])
    log     Logs    @relation(fields: [logId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("ProgressLogs")
}

model Logs {
    id             String  @id @default(cuid())
    description    String
    profileId      String? // for user activity summary
    progressLogsId String?
    // mediaUrl String? //for future extension

    profile      Profile?      @relation(fields: [profileId], references: [id])
    ProgressLogs ProgressLogs?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("Logs")
}
