generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    USER
    PROVIDER
}

enum Type {
    INDIVIDUAL
    COMPANY
}

enum Currency {
    USD
    AUD
    SGD
    INR
}

enum WorkNature {
    ONLINE
    ONSITE
}

enum OfferStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Profile {
    id           String   @id @default(cuid())
    role         Role
    type         Type?
    firstName    String?
    lastName     String?
    mobileNumber String   @unique
    email        String   @unique
    password     String
    address      Address?

    companyName       String?
    businessTaxNumber String? // 10-character capital letters/digits

    skills        Skill[] // For providers
    tasks         Task[] // For users
    offers        Offer[] // For providers
    acceptedTasks Task[]         @relation("AcceptedTasks")
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    ProgressLogs  ProgressLogs[]
    Logs          Logs[]
}

model Address {
    id           String   @id @default(cuid())
    streetNumber String
    streetName   String
    city         String
    state        String
    postcode     String
    profile      Profile  @relation(fields: [profileId], references: [id])
    profileId    String   @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Skill {
    id         String     @id @default(cuid())
    category   String
    experience String
    nature     WorkNature
    hourlyRate Float
    profile    Profile    @relation(fields: [profileId], references: [id])
    profileId  String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
}

model Task {
    id String @id @default(cuid())

    category      String
    name          String
    description   String
    startDate     DateTime
    expectedHours Int
    hourlyRate    Float
    currency      Currency
    user          Profile        @relation(fields: [userId], references: [id])
    userId        String
    offers        Offer[]
    acceptedBy    Profile?       @relation("AcceptedTasks", fields: [acceptedById], references: [id])
    acceptedById  String?
    ProgressLogs  ProgressLogs[]
    isCompleted   Boolean        @default(false)
    taskAccepted  Boolean        @default(false)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
}

model Offer {
    id         String      @id @default(cuid())
    provider   Profile     @relation(fields: [providerId], references: [id])
    providerId String
    task       Task        @relation(fields: [taskId], references: [id])
    taskId     String
    status     OfferStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ProgressSubType {
    TASK_STARTED
    TASK_PAUSED
    TASK_RESUMED
    TASK_STOPPED
}

model ProgressLogs {
    id     String @id @default(cuid())
    task   Task   @relation(fields: [taskId], references: [id])
    taskId String

    profile   Profile @relation(fields: [profileId], references: [id])
    profileId String // for user activity summary

    log   Logs   @relation(fields: [logId], references: [id])
    logId String @unique // Each ProgressLogs must have a unique, required Log

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("ProgressLogs")
}

model Logs {
    id          String @id @default(cuid())
    description String
    // mediaUrl String? //for future extension

    profile   Profile? @relation(fields: [profileId], references: [id])
    profileId String? // for user activity summary

    ProgressLogs   ProgressLogs?
    progressLogsId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("Logs")
}
